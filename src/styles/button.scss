/**
# Documentation du bouton
## Couleurs
3 Couleurs -> primary (défaut), secondary, tertiary

> Exemples
<button color="primary">... === <button>...
<button color="secondary">...

## Etats
3 états -> Hover, Active, Disabled
Possibilité de mettre le *hover* et le *active* en attribut pour forcer la visualiation

> Exemple
<button>... (plus souris au survol) === <button hover>...

## Icons
Possibilité de mettre une icone dans un bouton

> Exemple
<button>
	<i class="material-icons">
		account_circle
	</i>
</button>

## Styles
2 styles -> outline, round
*Outiline* = suppression de la couleur de fond avec créaction d'une bordure. Le texte et la bordure prennent la même couleur.
*Round* = accentuation de l'arrondi

> Exemple
<button outline>...
<button round>...
<button outline round>...

## Class suplémentaires
.no-text => force la suppression de la marge droite de l'icône.


**/

@import 'utils';
/* Button color state */

$hover-state: rgba(255, 255, 255, 0.4);
$click-state: rgba(0, 0, 0, 0.4);
$disable-state: rgba(199, 199, 199, 0.6);
/* Function */

/** attributions des couleurs **/

@mixin buttonColor($color, $text-color) {
	background-color: $color;
	color: $text-color;
	&:not([disabled='true']) {
		&:hover,
		&[hover] {
			background-color: mix($color, $hover-state);
		}
		&:active,
		&[active] {
			background-color: mix($color, $click-state);
		}
	}
	&[disabled]:not([outline]):not([disabled='false']) {
		background-color: mix($color, $disable-state);
	}
}

/** attributions des couleurs dans le cas d'un contour **/

@mixin buttonOutline($color) {
	background-color: transparent;
	color: $color;
	border: 1px solid $color;
	&:not([disabled='true']) {
		&:hover,
		&[hover] {
			color: white;
			background-color: mix($color, $hover-state);
			border: 1px solid mix($color, $hover-state);
		}
		&:active,
		&[active] {
			color: mix($color, $click-state);
			border: 1px solid mix($color, $click-state);
		}
	}
	&:not([disabled='true'])[disabled] {
		color: mix($color, $disable-state);
		border: 1px solid mix($color, $disable-state);
		opacity: 0.5;
	}
}

/** Appel des différentes functions en fonction du nom de class **/

@mixin buttonColorTemplate($name, $color, $text-color) {
	// color
	@if $name== '' {
		@include buttonColor($color, $text-color);
	} @else {
		&[color='#{$name}'] {
			@include buttonColor($color, $text-color);
		}
	} // outline
	@if $name== '' {
		&:not([outline='false'])[outline] {
			@include buttonOutline($color);
		}
	} @else {
		&:not([outline='false'])[color='#{$name}'][outline] {
			@include buttonOutline($color);
		}
	}
}

button {
	@include transition(background-color);
	@include transition-property(background-color, color, border-color);
	@include border-radius($small-border);
	@include align-items(center);
	line-height: 56px;
	padding: 0 16px;
	border: none;
	box-sizing: border-box;
	outline: none;
	font-weight: bold;
	cursor: pointer;
	white-space: nowrap;
	&[disabled]:not([disabled='false']) {
		cursor: auto;
	}
	&[round] {
		@include border-radius($large-border);
	}
	i {
		display: inline-block;
		position: relative;
		top: 6px;
	}
	&:not(.no-text) i {
		margin-right: 8px;
	}
	@include buttonColorTemplate('', $primary-color, white); // default config
	@include buttonColorTemplate('primary', $primary-color, white);
	@include buttonColorTemplate('secondary', $secondary-color, white);
	@include buttonColorTemplate('tertiary', $tertiary-color, white);
	@include buttonColorTemplate('option', $option-color, white);
	@include buttonColorTemplate('white', $white-color, $text-color);
}
